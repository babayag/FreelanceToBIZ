{"version":3,"sources":["components/barNav.js","components/About.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["BarNav","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Navbar","bg","variant","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","About","Container","Row","Col","Button","size","Home","App","barNav_BarNav","react_router_dom","basename","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78d11620.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nexport class BarNav extends Component\r\n{\r\n    render(){\r\n        return(\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/\">Home</Nav.Link>\r\n            <Nav.Link href=\"/about\">About</Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container,Row,Col, Button } from 'react-bootstrap';\r\n\r\nexport class About extends Component\r\n{\r\n    render(){\r\n        return(\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"flat\" size=\"xxl\">get the eagle</Button>\r\n                    </Col>\r\n                    <Col>2  2</Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>1 of 3</Col>\r\n                    <Col>2 of 3</Col>\r\n                    <Col>3 of 3</Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container,Row,Col } from 'react-bootstrap';\r\n\r\nexport class Home extends Component\r\n{\r\n    render(){\r\n        return(\r\n            <Container>\r\n                <Row>\r\n                    <Col>585</Col>\r\n                    <Col>2 of 2</Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>1 of 3</Col>\r\n                    <Col>2 of 3</Col>\r\n                    <Col>3 of 3</Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport  { BarNav }  from \"./components/barNav\";\nimport { About }  from \"./components/About\";\nimport { Home }  from \"./components/Home\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <BarNav/>\n        <BrowserRouter basename=\"FreelanceToBusiness/\">\n        <Switch>\n          <Route   exact path=\"/\" component={Home} />\n          <Route   path=\"/about\" component={About} />\n        </Switch>\n      </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}